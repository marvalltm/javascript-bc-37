// 'use strict';

/*
 * –ú–∞—Å—Å–∏–≤–∏: –ª—ñ—Ç–µ—Ä–∞–ª –º–∞—Å–∏–≤–∞, –µ–ª–µ–º–µ–Ω—Ç—ã, —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è, –¥–æ–≤–∂–∏–Ω–∞
 * –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å—Ç–∞—Ç—Ç—é, —è–∫ –ø—Ä–∞—Ü—é—î –ø–∞–º—î—è—Ç—å –≤ V8:  https://deepu.tech/memory-management-in-v8/
 * Arra.prototype: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries
 */

/*
 * TASK 1
 * –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ genres –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ ¬´Jazz¬ª –∏ ¬´Blues¬ª.
 * –î–æ–¥–∞–π—Ç–µ ¬´–†–æ–∫-–Ω-—Ä–æ–ª–ª¬ª —É –∫–æ–Ω—ñ—Ü—å.
 * –í–∏–≤–µ–¥—ñ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞.
 * –í–∏–≤–µ–¥—ñ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞. –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –º–∞—Å–∏–≤–∞ –¥–æ–≤—ñ–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏.
 * –í–∏–¥–∞–ª—ñ—Ç—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Ç–∞ –≤–∏–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.
 * –î–æ–¥–∞–π—Ç–µ ¬´Country¬ª —Ç–∞ ¬´Reggy¬ª –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤–∞.
 */

// const genres = ['Jazz', 'Blues'];

// // const genres2 = genres; // copy link to genres
// // const genres2 = [...genres]; // copy array from genres

// genres.push('Rock&Roll');
// const elem = genres.shift();
// console.log(elem);
// genres.unshift('Country', 'Reggy');
// console.log(genres);

/*
 * –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é —Ç–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–Ω—é
 */

/*
 * TASK 2
 * –°—Ç–≤–æ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É a = 10.
 * –°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–∞ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –∑–º—ñ–Ω–Ω—ñ–π b -> –∑–º—ñ–Ω–Ω—É a
 * –í–∏–≤–µ–¥—ñ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –æ–±–∏–¥–≤—ñ —Ü—ñ –∑–º—ñ–Ω–Ω—ñ
 * –ó–º—ñ–Ω—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó –∞ —Ç–∞ —â–µ —Ä–∞–∑ –≤–∏–≤–µ–¥—ñ—Ç—å —ó—Ö —É –∫–æ–Ω—Å–æ–ª—å
 */

// let a = 10;
// const b = a;

// // console.log('a: ', a); // 10
// // console.log('b: ', b); // 10

// a = 20;

// console.log('a: ', a); // 20
// console.log('b: ', b); // 10

// –ü–†–û–°–¢–Ü –¢–ò–ü–ò –ü–ï–†–ï–î–ê–Æ–¢–¨ –ó–ù–ê–ß–ï–ù–ù–Ø.

/*
 * TASK 2
 * –°—Ç–≤–æ—Ä—ñ—Ç—å –º–∞—Å–∏–≤ arr1 = [1, 2, 3].
 * –°—Ç–≤–æ—Ä—ñ—Ç—å —Ç–∞ –ø—Ä–∏—Å–≤–æ–π—Ç–µ –º–∞—Å–∏–≤—É arr2 -> –º–∞—Å–∏–≤ arr1
 * –í–∏–≤–µ–¥—ñ—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –æ–±–∏–¥–≤–∞ —Ü—ñ –º–∞—Å–∏–≤–∏
 * –î–æ–±–∞–≤—Ç–µ –µ–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å–∏–≤ arr1 —Ç–∞ —â–µ —Ä–∞–∑ –≤–∏–≤–µ–¥—ñ—Ç—å –æ–±–∏–¥–≤–∞ –º–∞—Å–∏–≤–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
 */

// const arr1 = –ø–æ—Å—ñ–ª–∞–Ω–Ω—è: [1, 2, 3];
// const arr2 = arr1 –ø–æ—Å—ñ–ª–∞–Ω–Ω—è;

// console.log('arr1: ', arr1); // [1, 2, 3]
// console.log('arr2: ', arr2); // [1, 2, 3]

// arr1.push(10);

// console.log('arr1: ', arr1); // [1, 2, 3, 10]
// console.log('arr2: ', arr2); // [1, 2, 3, 10]

/*
 * –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤–∞ —Ü–∏–∫–ª–∞–º–∏ for —Ç–∞ for...of
 */

/*
 * TASK 3
 * –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤–∞ fruits —Ü–∏–∫–ª–æ–º for.
 * –î–ª—è –∫–∞–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ –Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞.
 * –ù—É–º–µ—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 1.
 */

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (let index = 0; index < fruits.length; index += 1) {
//   console.log(`${index + 1}: ${fruits[index]}`);
// }

// for (const fruit of fruits) {
//   console.log(fruit);
// }

/*
 * TASK 4
 * –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤–∞ fruits —Ü–∏–∫–ª–æ–º for.. of.
 * –î–ª—è –∫–∞–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –≤–∏–≤–µ–¥—ã—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å:
 *  1. —ñ–Ω–¥–µ–∫—Å
 *  2. —ñ–Ω–¥–µ–∫—Å + –∑–Ω–∞—á–µ–Ω–Ω—è.
 *  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –º–µ—Ç–æ–¥–∏ keys —Ç–∞ entries
 */

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// for (const index of fruits.keys()) {
//   console.log(index);
// }

// for (const [index, value] of fruits.entries()) {
//   console.log(index, value);
// }

// for (const value of fruits.values()) {
//   console.log(value);
// }

/*
 * TASK 5
 * –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫–∞ —Å–∞–º–æ–≥–æ –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å–∏–≤—ñ.
 * –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –¥–æ–≤—ñ–ª—å–Ω–æ–≥–æ –º–∞—Å–∏–≤–∞ —á–∏—Å–µ–ª.
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ü–∏–∫–ª.
 */

// const numbers = [2, 17, 94, 1, -20, -1, 23, 37];
// let min = numbers[0];

// 1 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// for (let i = 0; i < numbers.length; i += 1) {
//   console.group();
//   console.log('i: ', i);
//   console.log('min: ', min);
//   console.log('numbers: ', numbers[i]);
//   if (numbers[i] < min) {
//     min = numbers[i];
//     console.log(true);
//   }
//   console.groupEnd();
// }

// 2 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// for (const number of numbers) {
//   if (number < min) {
//     min = number;
//   }
// }

// console.log(min);

/*
 * TASK 6
 * –í –Ω–∞—Å —î –º–∞—Å–∏–≤ –∑ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤, —Ç—Ä–µ–±–∞ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç
 */

// const salaries = [200, 450, 600, 150, 300];
// let total = 0;

// 1 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// for (let i = 0; i < salaries.length; i += 1) {
//   total += salaries[i];
//   console.log(total);
// }

// 2 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// for (const salary of salaries) {
//   total += salary;
// }

// console.log(total);

/*
 * TASK 7
 * –í –Ω–∞—Å —î –¥–µ–∫—ñ–ª—å–∫–∞ –º–∞—Å–∏–≤—ñ–≤ –∑ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤,
 *  —Ç—Ä–µ–±–∞ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç.
 */

// const managerSalaries = [100, 150, 250, 400, 500];
// const developersSalaries = [800, 1500, 4000];
// let total = 0;

// 1 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// for (const managerSalary of managerSalaries) {
//   total += managerSalary;
//   console.log('managerSalaries: ', total);
// }

// for (const developerSalary of developersSalaries) {
//   total += developerSalary;
//   console.log('developersSalaries: ', total);
// }

// console.log(total);

// 2 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// const salaries = [];

// for (const managerSalary of managerSalaries) {
//   salaries.push(managerSalary);
// }

// for (const developerSalary of developersSalaries) {
//   salaries.push(developerSalary);
// }

// for (const salary of salaries) {
//   total += salary;
// }

// console.log(total);

// 3 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// const allSalaries = [].concat(managerSalaries, developersSalaries);
// const allSalaries = managerSalaries.concat(developersSalaries);
// const allSalaries = [...managerSalaries, ...developersSalaries];

// for (const salary of allSalaries) {
//   total += salary;
// }

// console.log(total);

/*
 * TASK 8
 * –í –Ω–∞—Å —î –º–∞—Å–∏–≤ –º–∞—Å–∏–≤—ñ–≤ –∑ –∑–∞—Ä–ø–ª–∞—Ç–∞–º–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏—Ö –≤—ñ–¥–¥—ñ–ª—ñ–≤, —Ç—Ä–µ–±–∞ –ø–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º–º—É –∑–∞—Ä–ø–ª–∞—Ç.
 */
// const salaries = [
//   [1000, 1200, 1100, 900, 940, 600, 1000, 900],
//   [1000, 1400, 1500, 1200, 1940, 700],
//   [1030, 1300, 1900, 800, 3940],
//   [1000, 1200, 1100, 1900, 240, 600],
//   [1020, 1200, 1100, 900, 1400, 400],
//   [1200, 1200, 1100, 900, 950, 1000, 3500],
//   [1040, 1200, 1100, 900, 800],
// ];

// let total = 0;

// for (const department of salaries) {
//   for (const salary of department) {
//     total += salary;
//   }
// }

// console.log(total);

// const result = [];

// for (const department of salaries) {
//   let total = 0;
//   for (const salary of department) {
//     total += salary;
//   }
//   result.push(total);
// }

// console.log(result);

/*
 * –ë–∞–∑–æ–≤—ñ –º–µ—Ç–æ–¥–∏: split –∏ join, indexOf –∏ includes, push, slice –∏ splice, concat
 */

/*
 * TASK 9**
 * –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –±—É–¥–µ —à—É–∫–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å–∫–∞–¥—ñ –∑ —Å—Ç—Ä–æ–∫–∏:
 * We found 1243 products in 18 categories by your request.
 */

// const string = 'We found 1243 products in 18 categories by your request.';
// const string = 'We found 180 categories and 124302 products by your request.';
// const array = string.split(' ');
// // console.log(array);
// for (let i = 0; i < array.length; i += 1) {
//   let current = Number(array[i]);
//   //   console.log(current);
//   if (current) {
//     // console.log(true);
//     if (array[i + 1] === 'products') {
//       console.log(current);
//     }
//   }
// }

/*
 * TASK 10
 * –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * –í –∑–º—ñ–Ω–Ω–∏—Ö names –∏ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
 */

// const names = 'Jacob,William,Solomon,Artemis';
// const namesArr = names.split(',');
// const phones = '89001234567,89001112233,890055566377,890055566300';
// const phonesArr = phones.split(',');

// console.log(namesArr);
// console.log(phonesArr);

// for (let i = 0; i < namesArr.length; i += 1) {
//   console.log(`${namesArr[i]}: ${phonesArr[i]}`);
// }

/*
 * TASK 11
 * –ù–∞–ø–∏—à—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—Ä–æ–∫—É —É –∑–≤–æ—Ä–æ—Ç–Ω—å–æ–º—É –ø–æ—Ä—è–¥–∫—É.
 * –¢–∞ –≤–∏–≤–æ–¥–∏—Ç—å —ó—ó –≤ –∫–æ–Ω—Å–æ–ª—å.
 */

// 1 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// const string = 'Welcome to the future';
// const charsArr = string.split('');
// // console.log(charsArr);
// const reverseCharsArr = [];

// for (let i = charsArr.length - 1; i >= 0; i -= 1) {
//   //   console.log(i);
//   reverseCharsArr.push(charsArr[i]);
// }
// console.log(reverseCharsArr);
// console.log(reverseCharsArr.join(''));

// 2 –í–∞—Ä—ñ–∞–Ω—Ç —Ä—ñ—à–µ–Ω–Ω—è
// const string = 'Welcome to the future';
// let reverseStr = '';

// for (let i = string.length - 1; i >= 0; i -= 1) {
//   reverseStr += string[i];
// }

// console.log(reverseStr);

/*
 * TASK 12
 * –í –Ω–∞—Å —î –º–∞—Å–∏–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤, –≤—ñ–¥—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –π–æ–≥–æ —Ç–∞–∫, —â–æ–± —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–ª–∏—Å—å
 */

// const employees = ['Dennis', 'Shaw', 'Watkins', 'Ray', 'Shaw', 'Watkins'];
// const filteredEmployees = [];

// 0 === 0
// 1 === 1
// 2 === 2
// 3 === 3
// 1 === 4
// 3 === 5

// for (let i = 0; i < employees.length; i += 1) {
//   //   console.log('index current elem: ', employees.indexOf(employees[i]));
//   //   console.log('current index:', i);
//   if (employees.indexOf(employees[i]) === i) {
//     filteredEmployees.push(employees[i]);
//   }
// }

// console.log(filteredEmployees);

// // //* Array.prototype.splice: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/splice
// // //* C–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ Shaw –∑–≤—ñ–ª—å–Ω–∏–≤—Å—è, –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –∑ –º–∞—Å–∏–≤–∞
// const indexOfRemovedElement = filteredEmployees.indexOf('Shaw');
// filteredEmployees.splice(indexOfRemovedElement, 1);

// console.log(filteredEmployees);

// // //? –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ C–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ Jhonson, –ø–µ—Ä–µ–¥ Watkins;
// const indexOfWatkins = filteredEmployees.indexOf('Watkins');
// filteredEmployees.splice(indexOfWatkins, 1, 'Thornton');//–∑–∞–º—ñ–Ω–∏—Ç—å
// filteredEmployees.splice(indexOfWatkins, 0, 'Thornton');//–¥–æ–±–∞–≤–µ

// console.log(filteredEmployees);

// –∞–Ω–∞–ª–æ–≥—ñ—è replace
// const title = 'Title 1'.split(' ').join('-'); // Title-1
// console.log(title);

// –∞–Ω–∞–ª–æ–≥—ñ—è concat
// console.log([2, 4, 6].concat([1, 3], [5], [1, 2, 3, 4]));
// console.log([...[2, 4, 6], ...[1, 3], ...[5], ...[1, 2, 3, 4]]);
